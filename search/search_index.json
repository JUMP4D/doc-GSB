{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenue dans la documentation de GSB","text":"<p>Ce dossier contient toutes les informations n\u00e9cessaires pour reprendre, maintenir et faire \u00e9voluer</p> <ul> <li>GSB FRAIS : Application Web de gestion des frais professionnels.</li> <li>GSB VISITES : Application Mobile de suivi des visites.</li> </ul>"},{"location":"#gsb-fiches-frais-application-web-symfony","title":"\ud83d\udcd1 GSB FICHES FRAIS (Application Web Symfony)","text":"<p>GSB FICHES FRAIS est une application web permettant aux visiteurs d'enregistrer leurs frais de d\u00e9placement, h\u00e9bergement, repas, etc.</p>"},{"location":"#objectifs","title":"Objectifs","text":"<ul> <li>Enregistrer les frais li\u00e9s aux d\u00e9placements, repas, h\u00e9bergements...</li> <li>Consulter ses fiches de frais.</li> <li>Suivre la validation et remboursement des frais.</li> </ul>"},{"location":"#technologies-utilisees","title":"Technologies utilis\u00e9es","text":"<ul> <li>Back-end : Symfony</li> <li>Base de donn\u00e9es : MySQL</li> <li>Front-end : Twig, HTML, Tailwind CSS</li> </ul>"},{"location":"#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>PHP 8.2</li> <li>Composer</li> <li>Serveur MySQL</li> <li>Serveur Symfony local (<code>symfony server:start</code>)</li> </ul>"},{"location":"#gsb-visites-application-mobile-android","title":"\ud83d\udcf1 GSB VISITES (Application Mobile Android)","text":"<p>GSB VISITES est une application mobile permettant aux visiteurs de faire des rapports et suivre leurs visites aupr\u00e8s des praticiens.</p> <p>Consulter la maquette</p>"},{"location":"#objectifs_1","title":"Objectifs","text":"<ul> <li>Cr\u00e9e des rapports de visites et les consulter.</li> <li>Ajouter des praticiens.</li> <li>Consulter son portefeuille de praticiens.</li> </ul>"},{"location":"#technologies-utilisees_1","title":"Technologies utilis\u00e9es","text":"<ul> <li>Front-end : Android Studio (Java)</li> <li>library : Retrofit, expresso</li> <li>Back-end : Utilisation d'une API REST Express</li> <li>Base de donn\u00e9es : MongoDB</li> </ul>"},{"location":"intro/","title":"Introduction","text":""},{"location":"intro/#objectifs-de-lapplication-gsb-frais","title":"Objectifs de l'application GSB FRAIS","text":"<p>APPLI-FRAIS est une application de gestion des frais, permettant l'enregistrement des frais et le suivi des remboursements. Elle vise \u00e0 moderniser la gestion des frais dans l'entreprise.</p>"},{"location":"intro/#objectifs-principaux","title":"Objectifs principaux :","text":"<ul> <li>Enregistrement des frais (d\u00e9placements, restauration, h\u00e9bergement).</li> <li>Suivi du statut des remboursements (validation, paiement).</li> </ul>"},{"location":"intro/#utilisateurs","title":"Utilisateurs :","text":"<ul> <li>Visiteurs : Enregistrement des frais.</li> <li>Comptables : Validation des remboursements.</li> </ul>"},{"location":"intro/#objectifs-de-lapplication-gsb-visites","title":"Objectifs de l'application GSB VISITES","text":"<p>GSB VISITES est une application mobile Android pour les visiteurs. Elle facilite la saisie des rapport de visites et la consulation du portefeuille de praticiens</p>"},{"location":"intro/#objectifs-principaux_1","title":"Objectifs principaux :","text":"<ul> <li>Saisie des rapport de visites.</li> <li>Acc\u00e8s au portefeuille de praticiens.</li> <li>Ajout de nouveau praticiens</li> </ul>"},{"location":"intro/#utilisateurs_1","title":"Utilisateurs :","text":"<ul> <li>Visiteurs : Gestion des visites et des praticiens.</li> </ul>"},{"location":"android/Fonctionnalit%C3%A9s/","title":"Fonctionnalit\u00e9s de l'API de GSB VISITES","text":"<p>L'application GSB VISITES utilise une API REST. Cette API permet de g\u00e9rer les diff\u00e9rentes fonctionnalit\u00e9s de l'application li\u00e9es \u00e0 l'authentification, la cr\u00e9ation de rapport de visite et autres fonctionnalit\u00e9 de l'application.</p>"},{"location":"android/Fonctionnalit%C3%A9s/#1-authentification-des-utilisateurs","title":"1. Authentification des utilisateurs","text":"<p>L'application permet aux utilisateurs (visiteurs m\u00e9dicaux) de s'authentifier via l'API.</p> <ul> <li>Route de l'API : <code>POST /api/visiteur/login</code></li> </ul>"},{"location":"android/Fonctionnalit%C3%A9s/#formulaire-dauthentification","title":"Formulaire d'authentification :","text":"<ul> <li>email : [Champ de saisie] L'adresse email de l'utilisateur.</li> <li>password : [Champ de saisie] Le mot de passe de l'utilisateur.</li> </ul> <p>R\u00e9ponse :</p> <ul> <li><code>id</code> : Identifiant de l'utilisateur.</li> <li><code>token</code> : Un jeton d'authentification JWT pour s\u00e9curiser les requ\u00eates suivantes.</li> </ul>"},{"location":"android/Fonctionnalit%C3%A9s/#2-creation-dun-rapport","title":"2. Cr\u00e9ation d'un rapport","text":"<p>L'application permet \u00e0 l'utilisateur de cr\u00e9er un rapport de visite.</p>"},{"location":"android/Fonctionnalit%C3%A9s/#formulaire-rapport-de-visite","title":"Formulaire Rapport de visite :","text":"<ul> <li>date : [Champ de saisie] Date de la visite.</li> <li>commentaire : [Champ de saisie] Commentaire d\u00e9taillant la visite.</li> <li>praticien : [Liste d\u00e9roulante] S\u00e9lection du praticien (praticiens disponibles).</li> <li>motif : [Liste d\u00e9roulante] S\u00e9lection du motif de la visite.</li> </ul> <p>Route de l'API : <code>POST /api/visite</code></p>"},{"location":"android/Fonctionnalit%C3%A9s/#3-consultation-des-visites","title":"3. Consultation des visites","text":"<p>L'utilisateur peut consulter les visites qu'il a effectu\u00e9es.</p> <ul> <li>Route de l'API : <code>GET /api/visites</code></li> </ul> <p>R\u00e9ponse :</p> <p>Liste des visites avec les informations suivantes :</p> <ul> <li><code>date</code> : Date de la visite.</li> <li><code>commentaire</code> : Commentaire ajout\u00e9 lors de la visite.</li> <li><code>motif</code> : Motif de la visite.</li> </ul>"},{"location":"android/Fonctionnalit%C3%A9s/#4-ajout-dun-praticien","title":"4. Ajout d'un praticien","text":"<p>L'application permet \u00e0 l'utilisateur d'ajouter un praticien \u00e0 son portefeuille.</p>"},{"location":"android/Fonctionnalit%C3%A9s/#formulaire-praticien","title":"Formulaire Praticien :","text":"<ul> <li>nom : [Champ de saisie] Nom du praticien.</li> <li>prenom : [Champ de saisie] Pr\u00e9nom du praticien.</li> <li>tel : [Champ de saisie] Num\u00e9ro de t\u00e9l\u00e9phone du praticien.</li> <li>email : [Champ de saisie] Adresse email du praticien.</li> <li>rue : [Champ de saisie] Adresse de la rue du praticien.</li> <li>code_postal : [Champ de saisie] Code postal du praticien.</li> <li>ville : [Champ de saisie] Ville du praticien.</li> </ul> <p>Route de l'API : <code>POST /api/praticien</code></p>"},{"location":"android/Fonctionnalit%C3%A9s/#5-consultation-des-praticiens","title":"5. Consultation des praticiens","text":"<p>L'utilisateur peut consulter la liste des praticiens de son portefeuille.</p> <ul> <li>Route de l'API : <code>GET /api/praticiens/{id}</code></li> </ul> <p>R\u00e9ponse :</p> <p>Liste des praticiens avec les informations suivantes : - <code>nom</code> : Nom du praticien. - <code>prenom</code> : Pr\u00e9nom du praticien. - <code>tel</code> : Num\u00e9ro de t\u00e9l\u00e9phone. - <code>email</code> : Adresse email.</p>"},{"location":"android/api/","title":"Documentation de l'API de GSB VISITES","text":""},{"location":"android/api/#principales-technologies-utilisees","title":"Principales technologies utilis\u00e9es","text":"<ul> <li>TypeScript : Langage de programmation utilis\u00e9 pour le d\u00e9veloppement backend.</li> <li>Express : Framework web bas\u00e9 sur Node.js pour la cr\u00e9ation d'APIs REST.</li> <li>MongoDB : Base de donn\u00e9es NoSQL pour stocker les donn\u00e9es des utilisateurs, des visites, des motifs et des praticiens.</li> <li>dotenv : Biblioth\u00e8que pour la gestion des variables d'environnement (cl\u00e9s API, etc.).</li> <li>express-validator : Utilis\u00e9 pour valider les donn\u00e9es saisies par l'utilisateur.</li> <li>express-rate-limit : Utilis\u00e9 pour limiter le nombre de requ\u00eates effectu\u00e9es dans un d\u00e9lai donn\u00e9, prot\u00e9geant ainsi l'API contre les attaques par brute force ou les attaques par d\u00e9ni de service (DoS).</li> <li>bcrypt : Utilis\u00e9 pour le hachage des mots de passe, garantissant qu'ils ne sont jamais stock\u00e9s en clair.</li> <li>jsonwebtoken : Biblioth\u00e8que utilis\u00e9e pour g\u00e9n\u00e9rer et v\u00e9rifier les tokens JWT, permettant une gestion s\u00e9curis\u00e9e de l'authentification.</li> </ul>"},{"location":"android/api/#exemple-de-model","title":"Exemple de model :","text":"<pre><code>import mongoose from 'mongoose';\nimport encrypt from 'mongoose-encryption';\nimport bcrypt from 'bcrypt';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\ninterface IVisiteur {\n  nom: string;\n  prenom: string;\n  tel: string;\n  email: string;\n  date_embauche: Date;\n  visite: mongoose.Schema.Types.ObjectId[];\n  password: string;\n}\n\nconst visiteurSchema = new mongoose.Schema&lt;IVisiteur&gt;({\n    nom: { type: String, required: true},\n    prenom: { type: String, required: true },\n    tel: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    date_embauche: { type: Date, required: true },\n    visite: [{\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'Visite',\n        required: true\n    }],\n    password: { type: String, required: true }\n  });\n\nvisiteurSchema.plugin(encrypt, \n  { secret: process.env.KEY,\n    encryptedFields: ['nom', 'prenom', 'tel', 'date_embauche'] \n});\n\nvisiteurSchema.pre('save', async function (next) {\n  if (this.isModified('password')) {\n    this.password = await bcrypt.hash(this.password, 1);\n  }\n  next();\n});\n\n// M\u00e9thode pour v\u00e9rifier le mot de passe\nvisiteurSchema.methods.comparePassword = async function (candidatePassword: string) {\n  return await bcrypt.compare(candidatePassword, this.password);\n};\n\nconst Visiteur = mongoose.model&lt;IVisiteur&gt;('Visiteur', visiteurSchema);\n\nexport default Visiteur;\n</code></pre>"},{"location":"android/api/#exemple-de-methode-du-controlleur","title":"Exemple de m\u00e9thode du controlleur :","text":"<pre><code>export const createVisiteur = async (req: Request, res: Response): Promise&lt;void&gt; =&gt; {\n  await body(\"email\").isEmail().withMessage(\"Veuillez fournir un email valide.\").run(req);\n  await body(\"password\")\n    .isLength({ min: 6 })\n    .withMessage(\"Le mot de passe doit contenir au moins 6 caract\u00e8res.\")\n    .matches(/\\d/).withMessage('Le mot de passe doit contenir au moins un chiffre.')\n    .run(req);\n\n  // V\u00e9rification des erreurs\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    res.status(400).json({ message: \"Erreur de validation\", errors: errors.array() });\n    return;\n  }\n\n  try {\n    const { nom, prenom, email, tel , date_embauche, password} = req.body;\n\n    if (!nom || !prenom || !email || !tel || !date_embauche || !password) {\n      res.status(400).json({ message: \"Veuillez fournir un nom, un pr\u00e9nom, un email et un num\u00e9ro de t\u00e9l\u00e9phone.\" });\n      return;\n    }\n\n    // V\u00e9rification des types\n    if (typeof nom !== 'string' || typeof prenom !== 'string' || typeof email !== 'string' || typeof tel !== 'string' || typeof date_embauche !== 'string' || typeof password !== 'string') {\n      res.status(400).json({ message: \"Tous les champs doivent \u00eatre de type string.\" });\n      return;\n    }\n\n    const newVisiteur = new Visiteur({ nom, prenom, email, tel, date_embauche, password });\n\n    await newVisiteur.save();\n\n    res.status(201).json(newVisiteur);\n  } catch (err) {\n    console.error(\"Erreur lors de la cr\u00e9ation du visiteur :\", err);\n    res.status(500).json({ message: \"Erreur lors de la cr\u00e9ation du visiteur.\", error: err instanceof Error ? err.message : err });\n  }\n}\n\n</code></pre>"},{"location":"android/api/#exemple-de-route","title":"Exemple de route :","text":"<pre><code>import express from 'express';\nimport { getAllVisiteurs, createVisiteur, getVisiteurById, deleteVisiteur } from \"../controllers/visiteurController\";\n\nconst router = express.Router();\n\n// Route pour lister tous les visiteurs (GET /visiteur)\nrouter.get('/', getAllVisiteurs);\n\n// Route pour cr\u00e9er un nouveau visiteur (POST /visiteur)\nrouter.post('/', createVisiteur);\n\n// Route pour r\u00e9cup\u00e9rer un visiteur par son ID (GET /visiteur/:id)\nrouter.get('/:id', getVisiteurById);\n\n// Route pour supprimer un visiteur par son ID (DELETE /visiteur/:id)\nrouter.delete('/:id', deleteVisiteur);\n\nexport default router;\n</code></pre>"},{"location":"android/diagrammes/","title":"Diagramme de Classe de GSB VISITES","text":""},{"location":"android/securite/","title":"S\u00e9curit\u00e9 de GSB VISITES","text":""},{"location":"android/securite/#bibliotheques-javascript-utilisees","title":"Biblioth\u00e8ques JavaScript utilis\u00e9es","text":"<ol> <li> <p>Express Validator    Utilis\u00e9e pour valider les donn\u00e9es envoy\u00e9es par l'utilisateur (par exemple, v\u00e9rifier si un email est valide ou si un mot de passe respecte les crit\u00e8res de s\u00e9curit\u00e9).</p> </li> <li> <p>Mongoose Encryption    Permet de crypter les donn\u00e9es sensibles (comme les mots de passe) avant de les stocker dans la base de donn\u00e9es.</p> </li> <li> <p>bcrypt    Utilis\u00e9e pour le hachage des mots de passe, assurant qu'ils ne sont jamais stock\u00e9s en clair dans la base de donn\u00e9es.</p> </li> <li> <p>express-rate-limit</p> <p>Utilis\u00e9 pour limiter le nombre de requ\u00eates effectu\u00e9es dans un d\u00e9lai donn\u00e9, prot\u00e9geant ainsi l'API contre les attaques par brute force ou les attaques par d\u00e9ni de service (DoS).</p> </li> </ol>"},{"location":"android/securite/#authentification-et-jwt","title":"Authentification et JWT","text":"<p>L'authentification dans l'application est assur\u00e9e via un JWT (JSON Web Token). Apr\u00e8s l'authentification r\u00e9ussie de l'utilisateur (avec email et mot de passe), un token JWT est g\u00e9n\u00e9r\u00e9 pour s\u00e9curiser les requ\u00eates suivantes.</p> <ul> <li>M\u00e9thode d'authentification : <code>POST /api/visiteur/login</code></li> <li>Middleware d'authentification : Un middleware v\u00e9rifie la pr\u00e9sence et la validit\u00e9 du token JWT dans les en-t\u00eates des requ\u00eates. Cela garantit que seuls les utilisateurs authentifi\u00e9s peuvent acc\u00e9der aux ressources prot\u00e9g\u00e9es de l'application.</li> </ul>"},{"location":"android/securite/#code-du-middleware-de-limite-de-requete","title":"Code du middleware de limite de requete","text":"<pre><code>import rateLimit from \"express-rate-limit\";\nimport { Request, Response, NextFunction } from \"express\";\nimport bcrypt from \"bcrypt\";\nimport Visiteur from \"../models/visiteurModel\";\n\n// Configuration du middleware de limitation de d\u00e9bit\nconst limiter = rateLimit({\n    windowMs: 5 * 60 * 1000, // Fen\u00eatre de temps de 5 minutes\n    max: 3, // Limite chaque IP \u00e0 3 requ\u00eates par fen\u00eatre de 5 minutes\n    message: \"Trop de tentatives de connexion \u00e9chou\u00e9es depuis cette adresse IP, veuillez r\u00e9essayer plus tard.\", // Message renvoy\u00e9 lorsque la limite est atteinte\n});\n\nexport const loginRateLimiter = async (req: Request, res: Response, next: NextFunction) =&gt; {\n    const { email, password } = req.body;\n\n    try {\n        // Recherche du visiteur par email\n        const visiteur = await Visiteur.findOne({ email });\n        if (!visiteur) {\n            // Si le visiteur n'existe pas, appliquer la limitation de d\u00e9bit\n            return limiter(req, res, next);\n        }\n\n        // V\u00e9rification du mot de passe\n        const isPasswordValid = await bcrypt.compare(password, visiteur.password);\n        if (!isPasswordValid) {\n            // Si le mot de passe est incorrect, appliquer la limitation de d\u00e9bit\n            return limiter(req, res, next);\n        }\n\n        // Si les informations de connexion sont correctes, passer au middleware suivant\n        next();\n    } catch (err) {\n        // Gestion des erreurs\n        res.status(500).json({ message: \"Erreur lors de la v\u00e9rification des informations de connexion.\", error: err });\n    }\n};\n</code></pre>"},{"location":"android/securite/#code-du-middleware-dauthentification","title":"Code du middleware d'authentification","text":"<pre><code>import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\n\n// \u00c9tendre l'interface Request pour inclure la propri\u00e9t\u00e9 auth\ndeclare module 'express-serve-static-core' {\n  interface Request {\n    auth?: string;\n  }\n}\n\n// Interface pour le token d\u00e9cod\u00e9\ninterface DecodedToken {\n    VisiteurId: string;\n}\n\n// le middleware v\u00e9rifie si l'utilisateur est authentifi\u00e9\nexport const authMiddleware = (req: Request, res: Response, next: NextFunction): void =&gt; {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader) {\n        throw new Error('Authorization header is missing.');\n      }\n\n      const token = authHeader.split(' ')[1];\n      const decodedToken = jwt.verify(token, process.env.JWT_SECRET as string) as DecodedToken;\n\n      req.auth = decodedToken.VisiteurId;\n      next();\n    } catch (error) {\n      res.status(401).json({ error: 'Unauthorized request' });\n    }\n  };\n</code></pre>"},{"location":"android/tests/","title":"Tests de GSB VISITES","text":"<p>Les tests sont essentiels pour garantir que GSB VISITES fonctionne correctement, surtout en ce qui concerne l'interface utilisateur. Nous avons utilis\u00e9 Espresso pour effectuer des tests d'interface afin de simuler les actions de l'utilisateur sur l'application mobile.</p>"},{"location":"android/tests/#1-tests-dinterface-utilisateur-ui","title":"1. Tests d'Interface Utilisateur (UI)","text":""},{"location":"android/tests/#outil-utilise","title":"Outil utilis\u00e9","text":"<ul> <li>Espresso : Un framework de test Android permettant de simuler les interactions utilisateur avec l'interface de l'application, comme les clics, les saisies de texte et la validation des r\u00e9sultats attendus.</li> </ul>"},{"location":"android/tests/#exemple-de-test-espresso","title":"Exemple de test Espresso","text":"<p>L'exemple suivant montre comment nous avons test\u00e9 l'authentification, en simulant la saisie des identifiants de connexion.</p> <pre><code>public class authActivityTest {\n\n     @Rule\n     public ActivityScenarioRule&lt;MainActivity&gt; activityRule =\n             new ActivityScenarioRule&lt;&gt;(MainActivity.class);\n\n     @Test\n     public void testLoginSuccess() {\n         onView(withId(R.id.editEmail)).perform(typeText(\"bonhommemathis04@gmail.com\"));\n         onView(withId(R.id.editPass)).perform(typeText(\"aaaaaa1\"));\n         onView(withId(R.id.login)).perform(click());\n         onView(withText(containsString(\"Mathis\"))).check(matches(isDisplayed()));\n     }\n\n     @Test\n     public void testLoginFailure() {\n         onView(withId(R.id.editEmail)).perform(typeText(\"wronguser\"));\n         onView(withId(R.id.editPass)).perform(typeText(\"wrongpassword\"));\n         onView(withId(R.id.login)).perform(click());\n         onView(withText(containsString(\"Login failed!\"))).check(matches(isDisplayed()));\n     }\n</code></pre>"},{"location":"symfony/Fonctionnalit%C3%A9s/","title":"Fonctionnalit\u00e9s de GSB FRAIS","text":"<p>GSB FRAIS est une application web con\u00e7ue pour permettre aux utilisateurs (visiteurs) d'enregistrer leurs frais professionnels.</p>"},{"location":"symfony/Fonctionnalit%C3%A9s/#1-saisie-des-fiches-de-frais","title":"1. Saisie des fiches de frais","text":"<p>L'application permet aux utilisateurs de saisir des frais sous diff\u00e9rents types, incluant des frais forfaitis\u00e9s et des frais hors forfait.</p>"},{"location":"symfony/Fonctionnalit%C3%A9s/#frais-forfaitises","title":"Frais forfaitis\u00e9s :","text":"<ul> <li>Forfait \u00c9tape</li> <li>Forfait Kilom\u00e9trique</li> <li>Forfait H\u00f4tel</li> <li>Forfait Restaurant</li> </ul>"},{"location":"symfony/Fonctionnalit%C3%A9s/#frais-hors-forfait","title":"Frais hors forfait :","text":"<p>Les utilisateurs peuvent \u00e9galement saisir des frais hors forfait en sp\u00e9cifiant :</p> <ul> <li>La date </li> <li>Le libell\u00e9 (description).</li> <li>Le montant</li> </ul>"},{"location":"symfony/Fonctionnalit%C3%A9s/#2-consultation-des-fiches-de-frais","title":"2. Consultation des fiches de frais","text":"<p>Les visiteurs peuvent consulter les fiches de frais qu'ils ont saisies au cours de l'ann\u00e9e. Ils peuvent s\u00e9lectionner le mois de leur choix pour afficher les frais enregistr\u00e9s pour cette p\u00e9riode.</p>"},{"location":"symfony/Fonctionnalit%C3%A9s/#3-gestion-comptable","title":"3. Gestion comptable","text":"<p>Les comptables peuvent consulter les fiches de frais des visiteurs, par mois, pour proc\u00e9der \u00e0 la validation des frais en vue du remboursement.</p>"},{"location":"symfony/Fonctionnalit%C3%A9s/#fonctionnalites-de-gestion-comptable","title":"Fonctionnalit\u00e9s de gestion comptable :","text":"<ul> <li>Acc\u00e8s aux fiches de frais de tous les visiteurs.</li> <li>Validation des frais pour d\u00e9clencher le remboursement.</li> </ul>"},{"location":"symfony/diagrammes/","title":"Diagramme de Classe de GSB FRAIS","text":""},{"location":"symfony/securite/","title":"S\u00e9curit\u00e9 de GSB FICHES FRAIS","text":"<p>L'application GSB FICHES FRAIS met en place des mesures de s\u00e9curit\u00e9 pour prot\u00e9ger les donn\u00e9es des utilisateurs.</p>"},{"location":"symfony/securite/#1-authentification","title":"1. Authentification","text":"<p>L'application GSB FRAIS utilise le bundle Security de Symfony pour g\u00e9rer l'authentification des utilisateurs. Lors de la cr\u00e9ation ou de la modification d'un mot de passe, celui-ci est hash\u00e9 avant d'\u00eatre stock\u00e9 dans la base de donn\u00e9es, assurant ainsi la s\u00e9curit\u00e9 des informations sensibles.</p>"},{"location":"symfony/securite/#changement-de-mot-de-passe","title":"Changement de mot de passe","text":"<p>Les utilisateurs ont \u00e9galement la possibilit\u00e9 de modifier leur mot de passe via un formulaire d\u00e9di\u00e9, permettant de garantir que leurs identifiants restent \u00e0 jour et s\u00e9curis\u00e9s.</p>"},{"location":"symfony/securite/#2-login-et-mot-de-passe","title":"2. Login et Mot de Passe","text":"<ul> <li>Login : <code>AndreDavid@gmail.com</code></li> <li>Mot de passe : <code>gPkgX939</code></li> </ul> <p>Pour tester l'application, vous pouvez utiliser les identifiants suivants</p>"},{"location":"symfony/tests/","title":"Tests de GSB FRAIS","text":"<p>Les tests sont essentiels pour garantir le bon fonctionnement de l'application GSB FRAIS et s'assurer que chaque fonctionnalit\u00e9 r\u00e9pond aux exigences attendues.</p>"},{"location":"symfony/tests/#1-tests-unitaires","title":"1. Tests Unitaires","text":""},{"location":"symfony/tests/#outils-utilises","title":"Outils utilis\u00e9s","text":"<ul> <li>PHPUnit : Un bundle Symfony permettant d'\u00e9crire et d'ex\u00e9cuter des tests unitaires</li> </ul>"},{"location":"symfony/tests/#exemples-de-tests-unitaires-realises","title":"Exemples de tests unitaires r\u00e9alis\u00e9s","text":"<p>Imaginons que l'on souhaite tester l'ajout d'un frais forfait, comme un \"Forfait \u00c9tape\", dans l'application. Nous allons tester que ce frais est correctement ajout\u00e9.</p> <pre><code> public function testAjouterLigneFraisForfait(): void\n     {\n         // Cr\u00e9ation d'une instance de FicheFrais\n         $ficheFrais = new FicheFrais();\n\n         // Cr\u00e9ation d'une instance de FraisForfait\n         $fraisForfait = new FraisForfait();\n         $fraisForfait-&gt;setLibelle('Forfait Etape');\n         $fraisForfait-&gt;setMontant(25.00);\n\n         // Cr\u00e9ation d'une ligne de frais forfait\n         $ligneFraisForfait = new LigneFraisForfait();\n         $ligneFraisForfait-&gt;setFicheFrais($ficheFrais);\n         $ligneFraisForfait-&gt;setFraisForfait($fraisForfait);\n         $ligneFraisForfait-&gt;setQuantite(2);\n\n         // Ajout de la ligne \u00e0 la fiche de frais\n         $ficheFrais-&gt;addLigneFraisForfait($ligneFraisForfait);\n\n         // V\u00e9rification que la ligne a bien \u00e9t\u00e9 ajout\u00e9e\n         $this-&gt;assertContains($ligneFraisForfait, $ficheFrais-&gt;getLigneFraisForfaits());\n         $this-&gt;assertSame(2, $ligneFraisForfait-&gt;getQuantite());\n         $this-&gt;assertSame('Forfait Etape', $ligneFraisForfait-&gt;getFraisForfait()-&gt;getLibelle());\n     }\n</code></pre>"}]}